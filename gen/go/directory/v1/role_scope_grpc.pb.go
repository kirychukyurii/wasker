// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: directory/v1/role_scope.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ScopeService_ReadScope_FullMethodName    = "/directory.v1.ScopeService/ReadScope"
	ScopeService_UpdateScope_FullMethodName  = "/directory.v1.ScopeService/UpdateScope"
	ScopeService_DeleteScopes_FullMethodName = "/directory.v1.ScopeService/DeleteScopes"
	ScopeService_CreateScope_FullMethodName  = "/directory.v1.ScopeService/CreateScope"
	ScopeService_SearchScopes_FullMethodName = "/directory.v1.ScopeService/SearchScopes"
)

// ScopeServiceClient is the client API for ScopeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScopeServiceClient interface {
	ReadScope(ctx context.Context, in *ReadScopeRequest, opts ...grpc.CallOption) (*ReadScopeResponse, error)
	UpdateScope(ctx context.Context, in *UpdateScopeRequest, opts ...grpc.CallOption) (*UpdateScopeResponse, error)
	DeleteScopes(ctx context.Context, in *DeleteScopesRequest, opts ...grpc.CallOption) (*DeleteScopesResponse, error)
	CreateScope(ctx context.Context, in *CreateScopeRequest, opts ...grpc.CallOption) (*CreateScopeResponse, error)
	SearchScopes(ctx context.Context, in *SearchScopesRequest, opts ...grpc.CallOption) (*SearchScopesResponse, error)
}

type scopeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScopeServiceClient(cc grpc.ClientConnInterface) ScopeServiceClient {
	return &scopeServiceClient{cc}
}

func (c *scopeServiceClient) ReadScope(ctx context.Context, in *ReadScopeRequest, opts ...grpc.CallOption) (*ReadScopeResponse, error) {
	out := new(ReadScopeResponse)
	err := c.cc.Invoke(ctx, ScopeService_ReadScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopeServiceClient) UpdateScope(ctx context.Context, in *UpdateScopeRequest, opts ...grpc.CallOption) (*UpdateScopeResponse, error) {
	out := new(UpdateScopeResponse)
	err := c.cc.Invoke(ctx, ScopeService_UpdateScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopeServiceClient) DeleteScopes(ctx context.Context, in *DeleteScopesRequest, opts ...grpc.CallOption) (*DeleteScopesResponse, error) {
	out := new(DeleteScopesResponse)
	err := c.cc.Invoke(ctx, ScopeService_DeleteScopes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopeServiceClient) CreateScope(ctx context.Context, in *CreateScopeRequest, opts ...grpc.CallOption) (*CreateScopeResponse, error) {
	out := new(CreateScopeResponse)
	err := c.cc.Invoke(ctx, ScopeService_CreateScope_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scopeServiceClient) SearchScopes(ctx context.Context, in *SearchScopesRequest, opts ...grpc.CallOption) (*SearchScopesResponse, error) {
	out := new(SearchScopesResponse)
	err := c.cc.Invoke(ctx, ScopeService_SearchScopes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScopeServiceServer is the server API for ScopeService service.
// All implementations must embed UnimplementedScopeServiceServer
// for forward compatibility
type ScopeServiceServer interface {
	ReadScope(context.Context, *ReadScopeRequest) (*ReadScopeResponse, error)
	UpdateScope(context.Context, *UpdateScopeRequest) (*UpdateScopeResponse, error)
	DeleteScopes(context.Context, *DeleteScopesRequest) (*DeleteScopesResponse, error)
	CreateScope(context.Context, *CreateScopeRequest) (*CreateScopeResponse, error)
	SearchScopes(context.Context, *SearchScopesRequest) (*SearchScopesResponse, error)
	mustEmbedUnimplementedScopeServiceServer()
}

// UnimplementedScopeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedScopeServiceServer struct {
}

func (UnimplementedScopeServiceServer) ReadScope(context.Context, *ReadScopeRequest) (*ReadScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadScope not implemented")
}
func (UnimplementedScopeServiceServer) UpdateScope(context.Context, *UpdateScopeRequest) (*UpdateScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateScope not implemented")
}
func (UnimplementedScopeServiceServer) DeleteScopes(context.Context, *DeleteScopesRequest) (*DeleteScopesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteScopes not implemented")
}
func (UnimplementedScopeServiceServer) CreateScope(context.Context, *CreateScopeRequest) (*CreateScopeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateScope not implemented")
}
func (UnimplementedScopeServiceServer) SearchScopes(context.Context, *SearchScopesRequest) (*SearchScopesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchScopes not implemented")
}
func (UnimplementedScopeServiceServer) mustEmbedUnimplementedScopeServiceServer() {}

// UnsafeScopeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScopeServiceServer will
// result in compilation errors.
type UnsafeScopeServiceServer interface {
	mustEmbedUnimplementedScopeServiceServer()
}

func RegisterScopeServiceServer(s grpc.ServiceRegistrar, srv ScopeServiceServer) {
	s.RegisterService(&ScopeService_ServiceDesc, srv)
}

func _ScopeService_ReadScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopeServiceServer).ReadScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopeService_ReadScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopeServiceServer).ReadScope(ctx, req.(*ReadScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopeService_UpdateScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopeServiceServer).UpdateScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopeService_UpdateScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopeServiceServer).UpdateScope(ctx, req.(*UpdateScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopeService_DeleteScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteScopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopeServiceServer).DeleteScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopeService_DeleteScopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopeServiceServer).DeleteScopes(ctx, req.(*DeleteScopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopeService_CreateScope_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateScopeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopeServiceServer).CreateScope(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopeService_CreateScope_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopeServiceServer).CreateScope(ctx, req.(*CreateScopeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScopeService_SearchScopes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchScopesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScopeServiceServer).SearchScopes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScopeService_SearchScopes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScopeServiceServer).SearchScopes(ctx, req.(*SearchScopesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScopeService_ServiceDesc is the grpc.ServiceDesc for ScopeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScopeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "directory.v1.ScopeService",
	HandlerType: (*ScopeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadScope",
			Handler:    _ScopeService_ReadScope_Handler,
		},
		{
			MethodName: "UpdateScope",
			Handler:    _ScopeService_UpdateScope_Handler,
		},
		{
			MethodName: "DeleteScopes",
			Handler:    _ScopeService_DeleteScopes_Handler,
		},
		{
			MethodName: "CreateScope",
			Handler:    _ScopeService_CreateScope_Handler,
		},
		{
			MethodName: "SearchScopes",
			Handler:    _ScopeService_SearchScopes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "directory/v1/role_scope.proto",
}
